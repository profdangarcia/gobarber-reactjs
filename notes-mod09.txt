#################### Navegação
// dependencia
yarn add react-router-dom
// duas pastas em src: pages e routes
// arquivo index.js em routes
// dependencia
yarn add history
// configuração do arquivo history
// nova pasta em src: services com arquivo history.js
// criação das pastas de cada tela na pasta pages

// Criação do arquivo de rotas
// importação das rotas no App.js


############### Configuração do Reactotron
// dependencia
yarn add reactotron-react-js
// configurar arquivo do reactotron na pasta config (criar o arquivo)
// importar o arquivo em App.js


############## Rotas Privadas
// novo arquivo chamado Route.js na pasta routes
// adicionar a propriedade isPrivate nas rotas que forem privadas
// configurar a validação de prop-types
yarn add prop-types
// alterar importação do Routes para nosso arquivo ao invés do react-router-dom

############# Layouts Padrão
// criar nova pasta chamada _layouts dentro de pages (_ serve para ficar no inicio)
// criar duas novas pastas em _layouts uma para auth e outra default com um index.js dentro
// instalar o syled components
yarn add styled-components

// Importar os dois arquivos de Layout no arquivo Route.js
// Alterar o return do arquivo

############ Estilos Globais
// criar a pasta styles em src
// criar o arquivo global.js dentro da pasta styles e definir os estilos Globais
// importar os estilos globais e aplicar em App.js

############ Root Import (FACULTATIVO)
// dependencias necessárias para alterar configurações padrão do BABEL e WEBPACK
yarn add customize-cra react-app-rewired -D
// criar o arquivo config-overrides.js na raiz
// dependencia - plugin do BABEL
yarn add babel-plugin-root-import -D

//agora os caminhos de importação podem utilizar o til (~) para simbolizar a raiz
//no arquivo package.json os scripts de start, build e test devem ser alterados
    "start": "react-app-rewired start",
    "build": "react-app-rewired build",
    "test": "react-app-rewired test",

// nova dependencia para o eslint entender o novo mecanismo de importação
yarn add eslint-import-resolver-babel-plugin-root-import -D
// adicionar em settings do .eslintrc
    settings: {
        "import/resolver": {
          "babel-plugin-root-import": {
            rootPathSuffix: "src"
          },
        },
      },

// configurar para que seja possivel acessar arquivos de caminho segurando o ctrl
// novo arquivo chamado jsconfig.json em raiz


############### Estilização Telas de Autenticação
// nova pasta chamada assets em src
// utilização do polished
yarn add polished

############### Utilização do Unform
// dependencia
yarn add @rocketseat/unform
// substituir os Form e Input
// criar função handleSubmit que recebe 'data'
// colocar no form o onSubmit = {handleSubmit}

############## Validação dados do form
// utilização do Yup
yarn add yup
// utilizar o yup nas páginas com formulários
// criar o schema e adicionar o schema ao Form

############## Configurações do Store (Redux)
// nova pasta em src chamada store
// novo arquivo chamado index.js na pasta store
// nova pasta em store chamada modules
// dependencias
yarn add redux redux-saga react-redux reactotron-redux reactotron-redux-saga immer

// a pasta modules irá possuir uma pasta para cada tipo de redux
// nova pasta chamada auth em modules
// novos arquivos em auth chamados: actions.js, reducer.js, sagas.js

//novo arquivo em modules chamado rootReducer.js para agrupar todos reducers
//novo arquivo em modules chamado rootSaga.js para unir todos os sagas

// configurar
1- reducer.js
2- sagas.js
3- rootReducer
4- rootSaga
e o arquivo index.js dentro de store

//novo arquivo na pasta store chamado createStore.js
//configurar arquivo index.js

//alterações no arquivo de configuração do reactotron

############## Configurações de Login
// novas actions para o module de auth
// nova regra e função no arquivos sagas de auth
// dependencia para chamadas à API (axios)
yarn add axios

// arquivo de configuração na pasta services chamado api.js
//alterações no index.js do signIn
//configurações do reducer
//configurações no arquivo Route.js para utilizar a Store do redux


############## Armazenando o Perfil do Usuário
// novo model na store chamado user
// configurações do reducer e do sagas
// importação do reducer de user no rootReducer e no rootSaga

############## Persistencia dos Dados no Storage
//dependencia Redux-persist
yarn add redux-persist
//novo arquivo na pasta store chamado persistReducers.js
//configurações do arquivo persistReducers.js
//alterações do index.js de dentro da pasta store

//alterações de importação no arquivo App.js e no Route.js
//nova importação em App.js

############## Tela de Loading para Login
//ouvir dois novas actions no Reducer REQUEST e FAILURE de login
//refatoração no reducer para utilizar um unico return producer
//no index.js de login utilização do useSelector para utilizar o valor do Loading
//alteração no texto do botão de Loading

// alteração no saga de auth para utilizar o try catch caso haja erros

############## Utilização do React-Toastify
yarn add react-toastify
// importação do ToastContainer em App.js
// importação dos estilos do toastify dentro dos estilos globais
// importação do toast no arquivo de sagas.js para ser utilizado

############# Cadastro na Aplicação
// nova action signUpRequest
// utilização da action no index.js do signup
// utilização do useDispatch e alteração no handleSubmit
// alteração no saga.js de auth para ouvir a action de signUpRequest
